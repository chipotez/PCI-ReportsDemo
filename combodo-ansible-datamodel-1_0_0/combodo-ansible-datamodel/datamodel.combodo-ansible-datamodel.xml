<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.7">
  <classes>
    <class id="Ansible" _delta="define">
      <parent>FunctionalCI</parent>
      <php_parent>
        <name>Combodo\iTop\Ansible\Model\_Ansible</name>
        <file>src/Model/_Ansible.php</file>
      </php_parent>
      <properties>
        <category>bizmodel,searchable</category>
        <abstract>false</abstract>
        <db_table>ansible</db_table>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="org_id"/>
          </attributes>
        </reconciliation>
        <icon>asset/img/icons8-ansible.svg</icon>
      </properties>
      <fields>
        <field id="uuid" xsi:type="AttributeString">
          <sql>uuid</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
          <validation_pattern/>
        </field>
        <field id="status" xsi:type="AttributeEnum">
          <sql>status</sql>
          <values>
            <value id="production">production</value>
            <value id="implementation">implementation</value>
            <value id="obsolete">obsolete</value>
          </values>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
          <display_style>list</display_style>
          <dependencies/>
        </field>
        <field id="location_id" xsi:type="AttributeExternalKey">
          <sql>location_id</sql>
          <filter><![CDATA[SELECT Location AS l WHERE l.org_id = :this->org_id]]></filter>
          <dependencies>
            <attribute id="org_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <target_class>Location</target_class>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="location_name" xsi:type="AttributeExternalField">
          <extkey_attcode>location_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="functionalci_id" xsi:type="AttributeExternalKey">
          <sql>functionalci_id</sql>
          <filter><![CDATA[SELECT FunctionalCI AS f WHERE f.org_id = :this->org_id AND f.finalclass IN ('Server', 'VirtualMachine', 'ApplicationSolution')]]></filter>
          <dependencies>
            <attribute id="org_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <target_class>FunctionalCI</target_class>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="functionalci_name" xsi:type="AttributeExternalField">
          <extkey_attcode>functionalci_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="ansibleinventories_list" xsi:type="AttributeLinkedSet">
          <linked_class>AnsibleInventory</linked_class>
          <ext_key_to_me>ansible_id</ext_key_to_me>
          <tracking_level/>
          <edit_mode>add_remove</edit_mode>
        </field>
        <field id="ansibleinventorygroups_list" xsi:type="AttributeLinkedSet">
          <linked_class>AnsibleInventoryGroup</linked_class>
          <ext_key_to_me>ansible_id</ext_key_to_me>
          <tracking_level/>
          <edit_mode>add_remove</edit_mode>
        </field>
      </fields>
      <methods/>
      <presentation>
        <list>
          <items>
            <item id="uuid">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
            <item id="org_id">
              <rank>30</rank>
            </item>
            <item id="status">
              <rank>40</rank>
            </item>
            <item id="location_id">
              <rank>50</rank>
            </item>
          </items>
        </list>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
            <item id="status">
              <rank>30</rank>
            </item>
            <item id="business_criticity">
              <rank>40</rank>
            </item>
            <item id="location_id">
              <rank>50</rank>
            </item>
            <item id="move2production">
              <rank>60</rank>
            </item>
            <item id="uuid">
              <rank>70</rank>
            </item>
            <item id="functionalci_id">
              <rank>80</rank>
            </item>
          </items>
        </search>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
            <item id="status">
              <rank>30</rank>
            </item>
            <item id="uuid">
              <rank>40</rank>
            </item>
            <item id="functionalci_id">
              <rank>50</rank>
            </item>
          </items>
        </default_search>
        <details>
          <items>
            <item id="col:col0">
              <items>
                <item id="fieldset:Class:Ansible:baseinfo">
                  <items>
                    <item id="name">
                      <rank>10</rank>
                    </item>
                    <item id="org_id">
                      <rank>20</rank>
                    </item>
                    <item id="status">
                      <rank>30</rank>
                    </item>
                    <item id="business_criticity">
                      <rank>40</rank>
                    </item>
                    <item id="location_id">
                      <rank>50</rank>
                    </item>
                    <item id="description">
                      <rank>60</rank>
                    </item>
                    <item id="move2production">
                      <rank>70</rank>
                    </item>
                    <item id="uuid">
                      <rank>80</rank>
                    </item>
                    <item id="functionalci_id">
                      <rank>90</rank>
                    </item>
                  </items>
                  <rank>10</rank>
                </item>
              </items>
              <rank>10</rank>
            </item>
            <item id="contacts_list">
              <rank>30</rank>
            </item>
            <item id="documents_list">
              <rank>40</rank>
            </item>
            <item id="ansibleinventories_list">
              <rank>50</rank>
            </item>
            <item id="ansibleinventorygroups_list">
              <rank>60</rank>
            </item>
          </items>
        </details>
      </presentation>
    </class>
    <class id="AnsibleInventory" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <php_parent>
        <name>Combodo\iTop\Ansible\Model\_AnsibleInventory</name>
        <file>src/Model/_AnsibleInventory.php</file>
      </php_parent>
      <properties>
        <category>bizmodel,searchable</category>
        <abstract>false</abstract>
        <db_table>ansibleinventory</db_table>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="ansible_id"/>
          </attributes>
        </reconciliation>
        <icon>asset/img/icons8-list-of-thumbnails.svg</icon>
      </properties>
      <fields>
        <field id="name" xsi:type="AttributeString">
          <sql>name</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
          <validation_pattern/>
        </field>
        <field id="ansible_id" xsi:type="AttributeExternalKey">
          <sql>ansible_id</sql>
          <filter/>
          <dependencies/>
          <is_null_allowed>false</is_null_allowed>
          <target_class>Ansible</target_class>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="ansible_name" xsi:type="AttributeExternalField">
          <extkey_attcode>ansible_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="org_id" xsi:type="AttributeExternalField">
          <extkey_attcode>ansible_id</extkey_attcode>
          <target_attcode>org_id</target_attcode>
        </field>
        <field id="description" xsi:type="AttributeText">
          <sql>description</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="ansibleinventorygroups_list" xsi:type="AttributeLinkedSet">
          <linked_class>AnsibleInventoryGroup</linked_class>
          <ext_key_to_me>ansibleinventory_id</ext_key_to_me>
          <edit_mode>none</edit_mode>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <duplicates/>
        </field>
      </fields>
      <methods>
        <method id="AfterInsert">
          <comment/>
          <static>false</static>
          <access>protected</access>
          <type>Overload-cmdbAbstractObject</type>
          <code><![CDATA[    public function AfterInsert()
    {
    	parent::AfterInsert();

    	$oGroup = MetaModel::NewObject("AnsibleInventoryGroup");
    	$oGroup->Set('name', YAML_UNGROUPED_INVENTORY_GROUP_NAME);
    	$oGroup->Set('ansible_id', $this->Get('ansible_id'));
    	$oGroup->Set('ansibleinventory_id', $this->GetKey());
    	$oGroup->DBInsert();
	}]]></code>
        </method>
        <method id="AfterDelete">
          <comment/>
          <static>false</static>
          <access>protected</access>
          <type>Overload-cmdbAbstractObject</type>
          <code><![CDATA[    public function AfterDelete()
    {
    	parent::AfterDelete();

        $sOQL = "SELECT AnsibleInventoryGroup AS ig WHERE ig.ansibleinventory_id = :ansibleinventory_id AND name = :name";
        $oInventoryGoupSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('ansibleinventory_id' => $this->GetKey(), 'name' => YAML_UNGROUPED_INVENTORY_GROUP_NAME));
        while ($oInventoryGroup = $oInventoryGoupSet->Fetch()) {
        	$oInventoryGoup->DBDelete();
        }
	}]]></code>
        </method>
        <method id="DisplayBareRelations">
          <comment/>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[    public function DisplayBareRelations(WebPage $oP, $bEditMode = false)
    {
		parent::DisplayBareRelations($oP, $bEditMode);

        if (! $bEditMode) {
            $sOQL = "SELECT lnkAnsibleInventoryGroupToCI AS l JOIN AnsibleInventoryGroup AS g ON l.ansibleinventorygroup_id = g.id WHERE g.ansibleinventory_name = :name";
	        $oSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('name' => $this->Get('name')));
			$sName = Dict::Format('Class:AnsibleInventory/Tab:cis_list');
			$sTitle = Dict::Format('Class:AnsibleInventory/Tab:cis_list+');
			$iCount = $oSet->Count();
			$sCount = ($iCount != 0) ? " ($iCount)" : "";
			$sCode = 'functionalci';
			$oP->SetCurrentTab($sCode, $sName.$sCount, $sTitle);
			$oBlock = new DisplayBlock($oSet->GetFilter(), 'list', false);
    		if (version_compare(ITOP_DESIGN_LATEST_VERSION, '3.0', '<')) {
			    $oP->p(MetaModel::GetClassIcon('FunctionalCI').'&nbsp;'.$sTitle);
    			if ($iCount > 0) {
	    			$oBlock = new DisplayBlock($oSet->GetFilter(), 'list');
		    		$oBlock->Display($oP, $sCode, array('menu' => false));
			    } else {
				    $oP->p(Dict::S('UI:NoObjectToDisplay'));
			    }
		    } elseif (version_compare(ITOP_DESIGN_LATEST_VERSION, '3.1', '<')) {
                $oClassIcon = new Combodo\iTop\Application\UI\Base\Component\MedallionIcon\MedallionIcon(MetaModel::GetClassIcon('FunctionalCI', false));
                $oClassIcon->SetDescription($sTitle)->AddCSSClass('ibo-block-list--medallion');
                $oP->AddUiBlock($oClassIcon);
                $oBlock->Display($oP, 'blk-'.$sCode, array('menu' => false));
            } else {
                $oBlock->Display($oP, 'blk-'.$sCode, array(
                    'menu' => false,
                    'panel_title' => MetaModel::GetName('FunctionalCI'),
                    'panel_title_tooltip' => $sTitle,
                    'panel_icon' => MetaModel::GetClassIcon('FunctionalCI', false)
                ));
            }
        }
	}]]></code>
        </method>
      </methods>
      <presentation>
        <list>
          <items>
            <item id="ansible_id">
              <rank>10</rank>
            </item>
            <item id="org_id">
              <rank>20</rank>
            </item>
          </items>
        </list>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="ansible_id">
              <rank>20</rank>
            </item>
          </items>
        </search>
        <details>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="ansible_id">
              <rank>20</rank>
            </item>
            <item id="org_id">
              <rank>30</rank>
            </item>
            <item id="description">
              <rank>40</rank>
            </item>
            <item id="ansibleinventorygroups_list">
              <rank>50</rank>
            </item>
          </items>
        </details>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="ansible_id">
              <rank>20</rank>
            </item>
          </items>
        </default_search>
      </presentation>
    </class>
    <class id="AnsibleInventoryGroup" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <category>bizmodel,searchable</category>
        <abstract>false</abstract>
        <db_table>ansibleinventorygroup</db_table>
        <naming>
          <attributes>
            <attribute id="name"/>
          </attributes>
        </naming>
        <reconciliation>
          <attributes>
            <attribute id="name"/>
            <attribute id="ansibleinventory_id"/>
          </attributes>
        </reconciliation>
        <icon>asset/img/icons8-questionnaire.svg</icon>
        <uniqueness_rules>
          <rule id="name_inventory">
            <attributes>
              <attribute id="name"/>
              <attribute id="ansibleinventory_id"/>
            </attributes>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="name" xsi:type="AttributeString">
          <sql>name</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
          <validation_pattern/>
        </field>
        <field id="ansible_id" xsi:type="AttributeExternalKey">
          <sql>ansible_id</sql>
          <filter/>
          <dependencies/>
          <is_null_allowed>false</is_null_allowed>
          <target_class>Ansible</target_class>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="ansible_name" xsi:type="AttributeExternalField">
          <extkey_attcode>ansible_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="org_id" xsi:type="AttributeExternalField">
          <extkey_attcode>ansible_id</extkey_attcode>
          <target_attcode>org_id</target_attcode>
        </field>
        <field id="ansibleinventory_id" xsi:type="AttributeExternalKey">
          <sql>ansibleinventory_id</sql>
          <filter>SELECT AnsibleInventory AS i WHERE i.ansible_id = :this->ansible_id</filter>
          <dependencies>
            <attribute id="ansible_id"/>
          </dependencies>
          <is_null_allowed>false</is_null_allowed>
          <target_class>AnsibleInventory</target_class>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="ansibleinventory_name" xsi:type="AttributeExternalField">
          <extkey_attcode>ansibleinventory_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="parent_id" xsi:type="AttributeHierarchicalKey">
          <sql>parent_id</sql>
          <filter>SELECT AnsibleInventoryGroup AS ig WHERE ig.ansibleinventory_id = :this->ansibleinventory_id</filter>
          <dependencies>
            <attribute id="ansibleinventory_id"/>
          </dependencies>
          <is_null_allowed>true</is_null_allowed>
          <on_target_delete>DEL_MANUAL</on_target_delete>
        </field>
        <field id="parent_name" xsi:type="AttributeExternalField">
          <extkey_attcode>parent_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
       <field id="description" xsi:type="AttributeText">
          <sql>description</sql>
          <default_value/>
          <is_null_allowed>true</is_null_allowed>
        </field>
        <field id="functionalcis_list" xsi:type="AttributeLinkedSetIndirect">
          <ext_key_to_me>ansibleinventorygroup_id</ext_key_to_me>
          <ext_key_to_remote>functionalci_id</ext_key_to_remote>
          <linked_class>lnkAnsibleInventoryGroupToCI</linked_class>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <duplicates>false</duplicates>
        </field>
      </fields>
      <methods/>
      <presentation>
        <list>
          <items>
            <item id="parent_id">
              <rank>10</rank>
            </item>
            <item id="ansibleinventory_id">
              <rank>20</rank>
            </item>
            <item id="ansible_id">
              <rank>30</rank>
            </item>
            <item id="org_id">
              <rank>40</rank>
            </item>
          </items>
        </list>
        <search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="parent_id">
              <rank>20</rank>
            </item>
            <item id="ansibleinventory_id">
              <rank>30</rank>
            </item>
            <item id="ansible_id">
              <rank>40</rank>
            </item>
          </items>
        </search>
        <details>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="ansible_id">
              <rank>20</rank>
            </item>
            <item id="org_id">
              <rank>30</rank>
            </item>
            <item id="ansibleinventory_id">
              <rank>40</rank>
            </item>
            <item id="parent_id">
              <rank>50</rank>
            </item>
            <item id="description">
              <rank>60</rank>
            </item>
            <item id="functionalcis_list">
              <rank>70</rank>
            </item>
          </items>
        </details>
        <default_search>
          <items>
            <item id="name">
              <rank>10</rank>
            </item>
            <item id="parent_id">
              <rank>20</rank>
            </item>
            <item id="ansibleinventory_id">
              <rank>30</rank>
            </item>
            <item id="ansible_id">
              <rank>40</rank>
            </item>
          </items>
        </default_search>
      </presentation>
    </class>
    <class id="lnkAnsibleInventoryGroupToCI" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <is_link>1</is_link>
        <category>bizmodel,ipmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>lnkansibleinventorygrouptoci</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="functionalci_name"/>
            <attribute id="ansibleinventorygroup_name"/>
          </attributes>
        </naming>
        <style>
          <icon/>
        </style>
        <reconciliation>
          <attributes>
            <attribute id="functionalci_id"/>
            <attribute id="ansibleinventorygroup_id"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="no_duplicate">
            <attributes>
              <attribute id="functionalci_id"/>
              <attribute id="ansibleinventorygroup_id"/>
            </attributes>
            <filter><![CDATA[]]></filter>
            <disabled>false</disabled>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="functionalci_id" xsi:type="AttributeExternalKey">
          <sql>functionalci_id</sql>
          <target_class>FunctionalCI</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
          <jointype/>
        </field>
        <field id="functionalci_name" xsi:type="AttributeExternalField">
          <extkey_attcode>functionalci_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="functionalci_finalclass" xsi:type="AttributeExternalField">
          <extkey_attcode>functionalci_id</extkey_attcode>
          <target_attcode>finalclass</target_attcode>
        </field>
        <field id="ansibleinventorygroup_id" xsi:type="AttributeExternalKey">
          <sql>ansibleinventorygroup_id</sql>
          <target_class>AnsibleInventoryGroup</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
          <jointype/>
        </field>
        <field id="ansibleinventorygroup_name" xsi:type="AttributeExternalField">
          <extkey_attcode>ansibleinventorygroup_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="tag" xsi:type="AttributeTagSet">
          <sql>tag</sql>
          <is_null_allowed>true</is_null_allowed>
        </field>
      </fields>
      <methods>
        <method id="DoCheckToWrite">
          <comment/>
          <static>false</static>
          <access>protected</access>
          <type>Overload-cmdbAbstractObject</type>
          <code><![CDATA[    public function DoCheckToWrite()
    {
    	parent::DoCheckToWrite();

    	$iCI = $this->Get('functionalci_id');
    	$oCI = MetaModel::GetObject('FunctionalCI', $iCI, false);
    	if (!is_null($oCI))
    	{
    		$aCIClassesInInventoryGroupsParams = MetaModel::GetModuleSetting(ANSIBLE_MODULE_NAME, ANSIBLE_CI_CLASSES_IN_INVENTORYGROUPS, array());
    		if (!empty($aCIClassesInInventoryGroupsParams)) {
    			$aCIClassesInInventoryGroups = $aCIClassesInInventoryGroupsParams;
    		} else {
    			$aCIClassesInInventoryGroups = Combodo\iTop\Ansible\Model\_Ansible::GetDefaultFunctionalCIsInInventories();
    		}
			if (!in_array($oCI->Get('finalclass'), $aCIClassesInInventoryGroups))
			{
				$bFirstItem = true;
				$sListOfClasses = "";
				foreach ($aCIClassesInInventoryGroups AS $sKey => $sClass) {
					if ($bFirstItem) {
						$bFirstItem = false;
						$sListOfClasses .= MetaModel::GetName($sClass);
					} else {
						$sListOfClasses .= ", ".MetaModel::GetName($sClass);
					}
				}

				$this->m_aCheckIssues[] = Dict::Format('UI:AnsibleInventoryGroup:Action:New:lnkAnsibleInventoryGroupToCI:WrongCIClass', $sListOfClasses);
			}
		}
    	return;
	}]]></code>
        </method>
        <method id="GetInitialStateAttributeFlags">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[ public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
	{
		$iFlags = 0;
		switch ($sAttCode) {
			case 'tag':
			    if (version_compare(ITOP_DESIGN_LATEST_VERSION, '3.1', '<')) {
				    $iFlags |= OPT_ATT_HIDDEN;
				}
				break;
		}

		return $iFlags | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
    }]]></code>
        </method>
        <method id="GetAttributeFlags">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[ public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
	{
		$iFlags = 0;
		switch ($sAttCode) {
			case 'tag':
			    if (version_compare(ITOP_DESIGN_LATEST_VERSION, '3.1', '<')) {
				    $iFlags |= OPT_ATT_HIDDEN;
				}
				break;
		}

		return $iFlags | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
    }]]></code>
        </method>
      </methods>
      <presentation>
        <details>
          <items>
            <item id="functionalci_id">
              <rank>10</rank>
            </item>
            <item id="ansibleinventorygroup_id">
              <rank>20</rank>
            </item>
            <item id="tag">
              <rank>30</rank>
            </item>
          </items>
        </details>
        <search>
          <items>
            <item id="functionalci_id">
              <rank>10</rank>
            </item>
            <item id="ansibleinventorygroup_id">
              <rank>20</rank>
            </item>
            <item id="tag">
              <rank>30</rank>
            </item>
          </items>
        </search>
        <list>
          <items>
            <item id="functionalci_id">
              <rank>10</rank>
            </item>
            <item id="ansibleinventorygroup_id">
              <rank>20</rank>
            </item>
            <item id="tag">
              <rank>30</rank>
            </item>
          </items>
        </list>
      </presentation>
    </class>
    <class id="VirtualMachine" _delta="if_exists">
      <fields>
        <field id="virtualhost_id" _delta="if_exists">
          <is_null_allowed _delta="redefine">true</is_null_allowed>
        </field>
      </fields>
    </class>
  </classes>
  <dictionaries/>
  <menus>
    <menu id="ConfigManagement:Ansible" xsi:type="DashboardMenuNode" _delta="define">
      <rank>110</rank>
      <parent>ConfigManagementOverview</parent>
      <definition>
        <cells>
          <cell id="1">
            <rank>1</rank>
            <dashlets>
              <dashlet id="10" xsi:type="DashletHeaderStatic">
                <rank>0</rank>
                <title>Menu:Ansible:General</title>
                <icon>combodo-ansible-datamodel/asset/img/icons8-ansible.svg</icon>
              </dashlet>
              <dashlet id="11" xsi:type="DashletBadge">
                <rank>1</rank>
                <class>Ansible</class>
              </dashlet>
              <dashlet id="12" xsi:type="DashletBadge">
                <rank>2</rank>
                <class>AnsibleInventory</class>
              </dashlet>
              <dashlet id="13" xsi:type="DashletBadge">
                <rank>3</rank>
                <class>AnsibleInventoryGroup</class>
              </dashlet>
            </dashlets>
          </cell>
        </cells>
      </definition>
    </menu>
  </menus>
  <constants>
    <constant id="YAML_UNGROUPED_INVENTORY_GROUP_NAME" xsi:type="string" _delta="define">ungrouped</constant>
    <constant id="YAML_CHILDREN_SPACE" xsi:type="integer" _delta="define">2</constant>
    <constant id="YAML_GROUPS_SPACE" xsi:type="integer" _delta="define">2</constant>
    <constant id="YAML_HOSTS_SPACE" xsi:type="integer" _delta="define">4</constant>
    <constant id="YAML_CIS_SPACE" xsi:type="integer" _delta="define">6</constant>
    <constant id="YAML_HOST_VARIABLES_SPACE" xsi:type="integer" _delta="define">8</constant>
    <constant id="ANSIBLE_MODULE_NAME" xsi:type="string" _delta="define">combodo-ansible-datamodel</constant>
    <constant id="ANSIBLE_CI_CLASSES_IN_INVENTORYGROUPS" xsi:type="string" _delta="define">ci_classes_in_inventory_groups</constant>
  </constants>
  <user_rights>
    <groups>
      <group id="AnsibleObject" _delta="define">
        <classes>
          <class id="Ansible"/>
          <class id="AnsibleInventory"/>
          <class id="AnsibleInventoryGroup"/>
          <class id="lnkAnsibleInventoryGroupToCI"/>
        </classes>
      </group>
    </groups>
    <profiles>
      <profile id="130" _delta="define">
        <name>Ansible Manager</name>
        <description>Person in charge of Ansible documentation in iTop and eligible to execute Ansible dedicated WEB services</description>
        <groups>
          <group id="AnsibleObject">
            <actions>
              <action id="action:read">allow</action>
              <action id="action:bulk read">allow</action>
              <action id="action:write">allow</action>
              <action id="action:bulk write">allow</action>
              <action id="action:delete">allow</action>
              <action id="action:bulk delete">allow</action>
             </actions>
          </group>
          <group id="General">
            <actions>
              <action id="action:read">allow</action>
           </actions>
          </group>
          <group id="Documentation">
            <actions>
              <action id="action:read">allow</action>
            </actions>
          </group>
          <group id="Configuration">
            <actions>
              <action id="action:read">allow</action>
            </actions>
          </group>
        </groups>
      </profile>
    </profiles>
  </user_rights>
  <snippets>
    <snippet id="CombodoAnsibleDatamodel" _delta="define">
      <placement>module</placement>
      <module>combodo-ansible-datamodel</module>
      <rank>10</rank>
      <content><![CDATA[
/*******************************************************************************************
 * Plugin to add menu items in the "popup" menus related to Ansible inventories
 */
class CombodoAnsibleDatamodelExtraMenus implements iPopupMenuExtension {
	/**
	 * @inheritdoc
	 */
	public static function EnumItems($iMenuId, $param) {
		$aResult = array();
		switch($iMenuId) {
			case iPopupMenuExtension::MENU_OBJLIST_ACTIONS:	// $param is a DBObjectSet
			case iPopupMenuExtension::MENU_OBJLIST_TOOLKIT: // $param is a DBObjectSet
			    break;

			case iPopupMenuExtension::MENU_OBJDETAILS_ACTIONS: // $param is a DBObject
				$oObj = $param;

				// Additional actions for IPAddress and IPSubnet
				if ($oObj instanceof AnsibleInventory) {
					// Additional actions for Zone
					$aResult[] = new SeparatorPopupMenuItem();
			  	    $oAppContext = new ApplicationContext();
					$sContext = $oAppContext->GetForLink();

					/** @var \AnsibleInventory $oObj */
			  	    $id = $oObj->GetKey();
					$sClass = get_class($oObj);

					$aParams = $oAppContext->GetAsHash();
			  	    $aParams['class'] = $sClass;
					$aParams['id'] = $id;

					$operation = utils::ReadParam('operation', '');
					switch ($operation) {
						case 'apply_new':
						case 'apply_modify':
						case 'details':
							$aParams['operation'] = 'inventoryfiledisplay';
							$aParams['format'] = 'ini';
							$sMenu = 'UI:AnsibleInventory:Action:FileDisplay:Menu';
							$aResult[] = new URLPopupMenuItem($sMenu, Dict::S($sMenu), utils::GetAbsoluteUrlModulePage('combodo-ansible-datamodel', 'ui.combodo-ansible-datamodel.php', $aParams));
				            break;

						case 'inventoryfiledisplay':
							$sMenu = 'UI:AnsibleInventory:Action:Details:Menu';
							$aResult[] = new URLPopupMenuItem($sMenu, Dict::S($sMenu), utils::GetAbsoluteUrlAppRoot()."pages/UI.php?operation=details&class=$sClass&id=$id&$sContext");
						    break;

						default:
						    break;
				    }
			    }
				break;

            case iPopupMenuExtension::MENU_DASHBOARD_ACTIONS: // $param is a Dashboard
				break;

			default: // Unknown type of menu, do nothing
				break;
		}
		return $aResult;
	}
}]]></content>
    </snippet>
  </snippets>
</itop_design>