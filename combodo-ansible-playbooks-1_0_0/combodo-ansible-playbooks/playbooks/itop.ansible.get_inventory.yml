#
# @copyright   Copyright (C) 2023 Combodo SARL
# @license     http://opensource.org/licenses/AGPL-3.0
#
# This playbook builds an inventory file based on the information stored in iTop CMDB.
#
# Input parameters:
#  These are, by default, defined in the ./host_vars/localhost.yml file.
#  - itop_root = Root URL of the iTop application
#  - itop_ws_version = Web Service version
#  - itop_ws_auth_user = User login
#  - itop_ws_auth_pwd = User password
#  - itop_ws_ansible_uuid = UUID of the Ansible application in iTop
#  - itop_ws_ansible_inventory = Name of the inventory to consider
#  - itop_ws_ansible_inventory_format = Format of the inventory output file
#  - local_inventory_path = Path of the output file
#  - local_inventory_name = Name of the output file
#  - backup_inventory = Boolean to define if a backup of the current inventory file should be done or not
#
# Output parameters:
#   - file.date-time = Copy of the previous inventory file, if any
#   - file = Inventory file
#
---
- name: Get from iTop the Ansible inventory
  hosts: localhost 

  vars:
    url: "{{ itop_root }}/webservices/rest.php?version={{ itop_ws_version }}"
    format: "{{ itop_ws_ansible_inventory_format | lower }}"
    file: "{{ local_inventory_path }}/{{ local_inventory_name }}.{{ format }}"
    current_time: "{{ ansible_date_time.date }}-{{ ansible_date_time.time | replace(':','_') }}"

# If you prefer to encrypt the login account and password in an Ansible vault:
#  - Uncomment the following 2 lines
#  - Store the parameter in a local itopvault.yml file
#  vars_files:
#    itopvault.yml

  tasks:
    - name: Check key variables are defined and not empty
      ansible.builtin.fail:
        msg: "One variable is empty"
      with_items:
        - "{{ itop_ws_ansible_uuid }}"
        - "{{ itop_ws_ansible_inventory }}"
        - "{{ itop_ws_ansible_inventory_format }}"
      when:
        - not item
        - item is none

    - name: Call operation ansible/get_inventory
      ansible.builtin.uri:
        url: "{{ url }}"
        method: POST
        force_basic_auth: true
        url_username: "{{ itop_ws_auth_user }}" 
        url_password: "{{ itop_ws_auth_pwd }}"
        body: json_data= {
          "operation":"ansible/get_inventory",
          "uuid":"{{ itop_ws_ansible_uuid }}",
          "inventory":"{{ itop_ws_ansible_inventory }}",
          "format":"{{ format }}"
          }
        return_content: true
      register: response 

    - name: Save the Json data
      ansible.builtin.set_fact:
        jsondata: "{{ response.content | from_json }}"

    - name: Get error code and message
      ansible.builtin.set_fact:
        error_code: "{{ jsondata | json_query('code') }}"
        message: "{{ jsondata | json_query('message') }}"

    - name: Display error, if any
      ansible.builtin.fail:
        msg: "{{ message }}"
      when: error_code != "0"

    - name: When operation is successfull
      block:
        - name: Backup inventory if required
          block:
            - name: Check that the current inventory file exits
              stat:
                path: "{{ file }}"
              register: stat_file

            - name: Backup current inventory if it exists
              ansible.builtin.copy:
                src: "{{ file }}"
                dest: "{{ file }}.{{ current_time }}"
              when: stat_file.stat.exists
          when: backup_inventory == True

        - name: Get text_file
          ansible.builtin.set_fact:
            text_file: "{{ jsondata | json_query(param) }}"
          vars:
            param: 'objects.*.text_file'

        - name: Save result in file
          ansible.builtin.copy:
            content: "{{ text_file[0] }}"
            dest: "{{ file }}"

        - name: Set returned variables
          ansible.builtin.set_fact:
            error_code: = "0"
      when: error_code == "0"

#   - delete backup if files are the same ?