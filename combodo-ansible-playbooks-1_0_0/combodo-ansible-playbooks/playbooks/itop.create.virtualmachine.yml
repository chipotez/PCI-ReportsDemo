#
# This playbook is an example on how to use itop.core.write.yml playbook to create or update a Virtual Machine.
# The following parameters need to be set before calling the playbook
#  - obj_class = Class of CI to be written
#  - key = Set of attributes to be used for the reconciliation
#  - fields = Set of attributes to be used for update or creation
#  - output_fields = List of attributes to get from iTop once creation or update is done
# These can be set manually or result from the output of other playbooks, modules...
#
# Important note:
# The output_fields are used to detected changes between existing object and updated one.
#
---
- name: Create a Virtual Machine in iTop
  hosts: localhost

  tasks:
    - name: Set variables for the creation
      ansible.builtin.set_fact:
        obj_class: "VirtualMachine"
        key:
          "org_id":
            "name": "Demo"
          "name": "My Ansible VM"
          "virtualhost_id":
            "name": "Cluster1"
        fields:
          "name": "My Ansible VM"
          "org_id":
            "name": "Demo"
          "status": "implementation"
          "virtualhost_id":
            "name": "Cluster1"
            "org_id":
              "name": "Demo"
          "osfamily_id":
            "name": "Linux"
          "osversion_id":
            "name": "Ubuntu 20.04"
          "move2production": "2023-06-01"
          "managementip": "15.15.15.15"
        output_fields: "name, org_id, status, virtualhost_id, osfamily_id, osversion_id, move2production, managementip"

- name: Call iTop playbook to create or update the CI
  import_playbook: itop.core.write.yml

